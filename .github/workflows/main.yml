name: Build Standalone with Nuitka and Create Installer

# This workflow now runs on pushes of tags.
on:
  push:
    tags:
      - 'v*' # Recommended to trigger on tags like v1.0, v1.2.3, etc.

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      # 1. Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up a specific Python version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 3. Install project dependencies from requirements.txt
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Add this step before the 'Build with Nuitka' step in each job
      - name: Set Version from Tag
        run: echo "VERSION=${{ github.ref_name }}" | sed 's/v//' >> $GITHUB_ENV
        shell: bash

      # 4. Run the Nuitka-Action to compile the application
      - name: Build with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          # The main entry point of your application
          script-name: main.py
          company-name: "Liiesl"
          product-name: "Subtl"
          # Use the modified version environment variable
          file-version: ${{ env.VERSION }}
          product-version: ${{ env.VERSION }}
          file-description: "Subtl. An app for manipulating/editing subtitles."
          windows-icon-from-ico: assets/icon.ico
          mingw64: true
          # Tell Nuitka to create a standalone folder with all dependencies
          mode: standalone
          # Enable the PySide6 plugin, which is essential for this project
          enable-plugins: pyside6
          # Recursively include the 'tools' directory for your dynamic tool loader
          include-plugin-directory: tools
          # Include the 'assets' folder as a data file in the build output
          include-data-dir: assets=assets
          # For Windows, create a GUI application without a console window
          disable-console: true

      # 5. Upload the compiled application as a build artifact
      - name: Upload Standalone Artifact
        uses: actions/upload-artifact@v4
        with:
          # The name of the artifact will be 'Subtle-Windows-[tag]'
          name: Subtle-Windows-${{ github.ref_name }}
          # The path is the output folder created by Nuitka
          path: main.dist/
          retention-days: 7

      # 6. Create Installer for Windows
      - name: Install NSIS and create installer script
        run: |
          choco install nsis
          New-Item -ItemType File -Path installer.nsi -Value @"
          !define APP_NAME "Subtl"
          !define COMPANY_NAME "Liiesl"
          !define VERSION "${{ github.ref_name }}"
          !define EXE_NAME "main.exe"

          OutFile "${{ env.APP_NAME }}-${{ env.VERSION }}-Installer.exe"
          InstallDir "`$PROGRAMFILES\${{ env.APP_NAME }}"
          RequestExecutionLevel admin

          Page directory
          Page instfiles

          Section
            SetOutPath "`$INSTDIR"
            File /r "main.dist\"
            CreateShortCut "`$DESKTOP\${{ env.APP_NAME }}.lnk" "`$INSTDIR\${{ env.EXE_NAME }}"
          SectionEnd
          "@
        shell: powershell
        env:
          APP_NAME: "Subtl"
          VERSION: ${{ github.ref_name }}
          EXE_NAME: "main.exe"

      - name: Run NSIS
        uses: joncloud/makensis-action@v4
        with:
          script-file: installer.nsi

      # 7. Upload the Windows Installer as a separate artifact
      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: Subtle-Windows-${{ github.ref_name }}-Installer
          path: 'Subtl-${{ github.ref_name }}-Installer.exe'
          retention-days: 7

  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up a specific Python version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 3. Install project dependencies from requirements.txt
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Add this step before the 'Build with Nuitka' step in each job
      - name: Set Version from Tag
        run: echo "VERSION=${{ github.ref_name }}" | sed 's/v//' >> $GITHUB_ENV
        shell: bash

      # 4. Run the Nuitka-Action to compile the application
      - name: Build with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: main.py
          company-name: "Liiesl"
          product-name: "Subtl"
          # Use the modified version environment variable
          file-version: ${{ env.VERSION }}
          product-version: ${{ env.VERSION }}
          file-description: "Subtl. An app for manipulating/editing subtitles."
          mode: standalone
          enable-plugins: pyside6
          include-plugin-directory: tools
          include-data-dir: assets=assets

      # 5. Upload the compiled application as a build artifact
      - name: Upload Standalone Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Subtle-Ubuntu-${{ github.ref_name }}
          path: main.dist/
          retention-days: 7

  build-macos:
    runs-on: macos-latest
    steps:
      # 1. Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up a specific Python version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 3. Install project dependencies from requirements.txt
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Add this step before the 'Build with Nuitka' step in each job
      - name: Set Version from Tag
        run: echo "VERSION=${{ github.ref_name }}" | sed 's/v//' >> $GITHUB_ENV
        shell: bash

      # 4. Run the Nuitka-Action to compile the application
      - name: Build with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: main.py
          company-name: "Liiesl"
          product-name: "Subtl"
          # Use the modified version environment variable
          file-version: ${{ env.VERSION }}
          product-version: ${{ env.VERSION }}
          file-description: "Subtl. An app for manipulating/editing subtitles."
          mode: standalone
          enable-plugins: pyside6
          include-plugin-directory: tools
          include-data-dir: assets=assets

      # 5. Upload the compiled application as a build artifact
      - name: Upload Standalone Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Subtle-macOS-${{ github.ref_name }}
          path: main.dist/
          retention-days: 7