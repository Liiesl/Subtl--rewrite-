name: Nuitka Build

on:
  workflow_call:
    inputs:
      os:
        description: 'Which OS to build for (windows, ubuntu, macos, or all)'
        required: true
        type: string
        default: 'all'
      version_tag:
        description: 'The tag to use for versioning (e.g., v1.2.3)'
        required: true
        type: string
      # Add this new input for the environment name
      environment_name:
        description: 'The name of the GitHub Environment to run in'
        required: true
        type: string

jobs:
  build-windows:
    if: ${{ inputs.os == 'all' || inputs.os == 'windows' }}
    runs-on: windows-latest
    environment:
      name: ${{ inputs.environment_name }}
      url: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ inputs.version_tag }}
    steps:
      # 1. Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up a specific Python version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 3. Install project dependencies from requirements.txt
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Add this step before the 'Build with Nuitka' step in each job
      - name: Set Version from Tag
        run: echo "VERSION=${{ inputs.version_tag }}" | sed 's/v//' >> $GITHUB_ENV
        shell: bash

      # 4. Run the Nuitka-Action to compile the application
      - name: Build with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          # The main entry point of your application
          script-name: main.py
          company-name: "Liiesl"
          product-name: "Subtl"
          # Use the modified version environment variable
          file-version: ${{ env.VERSION }}
          product-version: ${{ env.VERSION }}
          file-description: "Subtl. An app for manipulating/editing subtitles."
          windows-icon-from-ico: assets/icon.ico
          mingw64: true
          # Tell Nuitka to create a standalone folder with all dependencies
          mode: standalone
          # Enable the PySide6 plugin, which is essential for this project
          enable-plugins: pyside6
          # Recursively include the 'tools' directory for your dynamic tool loader
          include-plugin-directory: tools
          # Include the 'assets' folder as a data file in the build output
          include-data-dir: assets=assets

      # 5. Upload the compiled application as a build artifact
      - name: Upload Standalone Artifact
        uses: actions/upload-artifact@v4
        with:
          # The name of the artifact will be 'Subtle-Windows-[tag]'
          name: Subtle-Windows-${{ github.ref_name }}
          # The path is the output folder created by Nuitka
          path: build/main.dist/
          retention-days: 7

  build-ubuntu:
    if: ${{ inputs.os == 'all' || inputs.os == 'ubuntu' }}
    runs-on: ubuntu-latest
    # Use the input to set the environment name dynamically
    environment:
      name: ${{ inputs.environment_name }}
      url: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ inputs.version_tag }}
    steps:
      # 1. Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up a specific Python version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 3. Install project dependencies from requirements.txt
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Add this step before the 'Build with Nuitka' step in each job
      - name: Set Version from Tag
        run: echo "VERSION=${{ github.ref_name }}" | sed 's/v//' >> $GITHUB_ENV
        shell: bash

      # 4. Run the Nuitka-Action to compile the application
      - name: Build with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: main.py
          company-name: "Liiesl"
          product-name: "Subtl"
          # Use the modified version environment variable
          file-version: ${{ env.VERSION }}
          product-version: ${{ env.VERSION }}
          file-description: "Subtl. An app for manipulating/editing subtitles."
          mode: standalone
          enable-plugins: pyside6
          include-plugin-directory: tools
          include-data-dir: assets=assets

      # 5. Upload the compiled application as a build artifact
      - name: Upload Standalone Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Subtle-Ubuntu-${{ github.ref_name }}
          path: build/main.dist/
          retention-days: 7

  build-macos:
    if: ${{ inputs.os == 'all' || inputs.os == 'macos' }}
    runs-on: macos-latest
    # Use the input to set the environment name dynamically
    environment:
      name: ${{ inputs.environment_name }}
      url: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ inputs.version_tag }}
    steps:
      # 1. Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up a specific Python version
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # 3. Install project dependencies from requirements.txt
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Add this step before the 'Build with Nuitka' step in each job
      - name: Set Version from Tag
        run: echo "VERSION=${{ github.ref_name }}" | sed 's/v//' >> $GITHUB_ENV
        shell: bash

      # 4. Run the Nuitka-Action to compile the application
      - name: Build with Nuitka
        uses: Nuitka/Nuitka-Action@main
        with:
          script-name: main.py
          company-name: "Liiesl"
          product-name: "Subtl"
          # Use the modified version environment variable
          file-version: ${{ env.VERSION }}
          product-version: ${{ env.VERSION }}
          file-description: "Subtl. An app for manipulating/editing subtitles."
          mode: standalone
          enable-plugins: pyside6
          include-plugin-directory: tools
          include-data-dir: assets=assets

      # 5. Upload the compiled application as a build artifact
      - name: Upload Standalone Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Subtle-macOS-${{ github.ref_name }}
          path: build/main.dist/
          retention-days: 7