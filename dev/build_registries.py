# build_registries.py
#
# USAGE: Run this script from your project's root directory:
# > python build_registries.py
#
# This is a developer utility script, NOT part of the main application.
# Its purpose is to scan the 'tools' directory and automatically generate
# the 'tools/tool_registry.py' and 'tools/style_registry.py' files.
# These files contain explicit imports needed for a Nuitka build to succeed.
#
# Run this script whenever you add, remove, or rename a tool or its style file.

import os

# --- Configuration ---
TOOLS_DIR = 'tools'
TOOL_REGISTRY_PATH = os.path.join(TOOLS_DIR, 'tool_registry.py')
STYLE_REGISTRY_PATH = os.path.join(TOOLS_DIR, 'style_registry.py')
# ---------------------

def scan_tools_directory():
    """Scans the tools directory to find valid tool modules and style templates."""
    found_items = {}
    if not os.path.isdir(TOOLS_DIR):
        print(f"Error: Tools directory '{TOOLS_DIR}' not found.")
        return {}

    for item_name in os.listdir(TOOLS_DIR):
        item_path = os.path.join(TOOLS_DIR, item_name)
        if os.path.isdir(item_path) and not item_name.startswith('__'):
            # Initialize dict for the found tool directory
            found_items.setdefault(item_name, {'has_tool_module': False, 'has_style_module': False})

            tool_module_path = os.path.join(item_path, f'{item_name}.py')
            if os.path.exists(tool_module_path):
                print(f"  -> Found tool '{item_name}'")
                found_items[item_name]['has_tool_module'] = True

            style_module_path = os.path.join(item_path, f'{item_name}_styles.py')
            if os.path.exists(style_module_path):
                print(f"    - Found style template for '{item_name}'")
                found_items[item_name]['has_style_module'] = True
    return found_items

def write_tool_registry_file(tools_map):
    """Generates and writes the content of tool_registry.py."""
    tool_names = sorted([name for name, data in tools_map.items() if data['has_tool_module']])
    
    header = """# tool_registry.py
#
# !!! THIS FILE IS AUTO-GENERATED BY build_registries.py !!!
# !!! DO NOT EDIT MANUALLY. YOUR CHANGES WILL BE OVERWRITTEN. !!!
#
# This file contains the explicit list of all tools to be included in the
# application. It is used by the tool_loader to populate the list of
# available tools in a way that is compatible with compilers like Nuitka.

# --- Tool Module Imports ---
# Nuitka will trace these imports and include them in the final build.
"""
    import_lines = [f"from tools.{name} import {name} as {name}_module" for name in tool_names]
    module_list_lines = [f"    {name}_module," for name in tool_names]
    
    registry_list = f"""
# --- Tool Module Imports ---
{''.join([line + chr(10) for line in import_lines])}
# --- Tool Registration List ---
# The tool_loader will iterate through this list to build the AVAILABLE_TOOLS dict.
REGISTERED_TOOL_MODULES = [
{chr(10).join(module_list_lines)}
]
"""
    try:
        with open(TOOL_REGISTRY_PATH, 'w') as f:
            f.write(header + registry_list)
        print(f"\nSuccessfully updated '{TOOL_REGISTRY_PATH}' with {len(tool_names)} tools.")
    except IOError as e:
        print(f"\nError: Could not write to '{TOOL_REGISTRY_PATH}': {e}")

def write_style_registry_file(tools_map):
    """Generates and writes the content of style_registry.py."""
    tools_with_styles = sorted([name for name, data in tools_map.items() if data['has_style_module']])

    header = """# style_registry.py
#
# !!! THIS FILE IS AUTO-GENERATED BY build_registries.py !!!
# !!! DO NOT EDIT MANUALLY. YOUR CHANGES WILL BE OVERWRITTEN. !!!
#
# This file contains the explicit list of all tool-specific stylesheets
# to be included in the application.

# --- Style Module Imports ---
"""
    import_lines = [f"from tools.{name} import {name}_styles as {name}_styles_module" for name in tools_with_styles]
    dict_lines = [f'    "{name}": {name}_styles_module.STYLE_TEMPLATE,' for name in tools_with_styles]

    registry_dict = f"""
# --- Style Module Imports ---
{''.join([line + chr(10) for line in import_lines])}
# --- Style Template Registration Dictionary ---
REGISTERED_STYLE_TEMPLATES = {{
{chr(10).join(dict_lines)}
}}
"""
    try:
        with open(STYLE_REGISTRY_PATH, 'w') as f:
            f.write(header + registry_dict)
        print(f"Successfully updated '{STYLE_REGISTRY_PATH}' with {len(tools_with_styles)} style templates.")
    except IOError as e:
        print(f"\nError: Could not write to '{STYLE_REGISTRY_PATH}': {e}")

if __name__ == "__main__":
    print("Scanning for tools and style templates...")
    found_items = scan_tools_directory()
    if found_items:
        write_tool_registry_file(found_items)
        write_style_registry_file(found_items)
    else:
        print("No items found. Registry files will be created empty.")
        write_tool_registry_file({})
        write_style_registry_file({})